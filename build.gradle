import com.vanniktech.maven.publish.SonatypeHost

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java"
    id "com.vanniktech.maven.publish" version "0.28.0"
}

group = GROUP
version = VERSION_NAME

tasks.withType(JavaCompile) {
    JavaVersion compilerJavaVersionEnum = JavaVersion.current()
    if (compilerJavaVersionEnum != JavaVersion.VERSION_17) {
        throw new GradleException("JDK 17 is required to build PortOne")
    }

    options.fork = true
    options.forkOptions.jvmArgs += ['-Xms512M', '-Xmx1g']

    options.release = project.targetCompatibility.majorVersion as Integer

    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = "UTF-8"
}

compileJava {
    options.compilerArgs << "-Werror"
}

configurations.all {
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.8.2"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.8.2"
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                   "Implementation-Version": VERSION_NAME,
                   "Bundle-SymbolicName": POM_ARTIFACT_ID,
                   "Export-Package": "io.portone.*")

        archiveVersion = VERSION_NAME
    }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    coordinates(GROUP, POM_ARTIFACT_ID, VERSION_NAME)

    pom {
        name = POM_NAME
        description = POM_DESCRIPTION
        url = POM_URL
        packaging = POM_PACKAGING
        licenses {
            license {
                name = POM_LICENCE_NAME
                url = POM_LICENCE_URL
                distribution = POM_LICENCE_DIST
            }
        }
        developers {
            developer {
                id = POM_DEVELOPER_ID
                name = POM_DEVELOPER_NAME
            }
        }
        organization {
            name = POM_DEVELOPER_NAME
            url = POM_ORGANIZATION_URL
        }
        scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
        }
    }
}

//apply from: "deploy.gradle"
